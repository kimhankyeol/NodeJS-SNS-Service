9.1 프로젝트 구조 

nodebird 라는 폴더를 만듬
package.json을 제일 먼저 생성함
package.json을 생성해주는 npm init 명령어를 콘솔에서 호출해도 됨 또한 직접 만들어도됨 
scripts 부분에 start 속성은 잊지말고 넣어줘야함
nodebird 폴더 들어가서 npm init 으로 만들어줌
name : nodebird, entrypoint : app.js // 자바 스크립트 진입점

여기서는 NoSQL 대신 SQL 을 데이터베이스로 사용할 것임
사용자와 게시물간 ,게시물과 해시태그 간의 관계가 중요하므로 관계형 데이터베이스 인 MySQL 을 선택

시퀄라이즈 설치
npm i -g sequelize-cli
npm i sequelize mysql2
sequelize init

npm i sequelize mysql2를 호출하면 node_modules 폴더와 package-lock.json이 생성
또한 sequelize init호출하면 config, migrations,models,seeders 폴더가 생성됨
다른 폴더도 생성함 템플릿 파일을 넣을 views 폴더와 라우터를 넣을 routes 폴더 그리고 정적 파일을 넣을 public폴더가 필요함 
뒤에서 설명할 passport 패키지를 위한 passport폴더도 만들어줌
마지막으로 익스프레스 서버 코드가 담길 app.js를 nodebird 폴더안에 생성함
<!-- 집에서는 346p 폴더까지만 생성 app.js 생성안함-->
학교에서는 생성함 app.js 

이렇게 까지 하고 폴더구조를 보면 Express-generator 가 생성해주는 기본 구조와 상당히 유사함
이 구조는 고정된 구조가 아님 
편의에 따라 바꿔도됨

필요한 npm패키지들을 설치하고 app.js를 작성함
템플릿 엔진 pug 사용

npm i express cookie-parser express-session morgan connect-flash pug
npm i -g nodemon
npm i -D nodemon

서버코드에 수정사항이 생길떄마다 매번 서버를 재시작 하기는 귀찮으므로 nodemon 모듈로 서버를 자동 재시작
nodemon 은 개발용으로만 사용할 것을 권장함 
배포후에는 서버 코드가 빈번하게 변경될일이 없으므로 nodemon을 사용하지 않아도 됨

app.js 에서는 6장에서 배운 미들웨어 대부분 사용하고 있음
이 프로젝트 콘솔에서는 bin/www 필요하지않음

라우터로는 현재 pageRouter 만 있지만 추후에 더 추가 할 예정임
라우터 이후에는 404 미들웨어와 에러 핸들링 미들웨어가 있음
마지막 앱을 8001번 포트에 연결

이제부터 cookieParser 와 express-session의 nodebirdsecret 같은 비밀키는 직접 하드 코딩하지 않음
키를 하드코딩하면 소스코드가 유출되었을떄 키도 같이 유출되므로 별도로 관리해야됨
이를 위한 패키지가 dotenv임 비밀키는 .env라는 파일에 모아두고 , dotenv가 .env 파일을 읽어 process.env 객체에 넣음

npm i dotenv

.env 파일을 생성함 
파일명앞에 . 이 붙어있는것 주의 
dotenv 패키지의 이름이 dot 점 + env 인 이유
.env 파일에  키= 값 형식으로 비밀번호를 저장하면됨
나중에 gitignore 에 .env 파일 따로 처리해서 안 올리면될듯

app.js 에 require('dotenv').config(); 를 호출하면 됨
서버시작시 .env의 비밀키들을 process.env에 넣으므로 이후에 process.env.COOKIE_SECRET처럼 키를 사용할 수 있음
하드코딩된 비밀번호가 유일하게 남아 있는 파일이 있음
시퀄라이즈 설정을 담아둔 config , json임  JSON파일이라 process.env를 사용할 수 없음
시퀄라이즈의 비밀번호를 숨기는 방법은 15.1.2절에서 알아봄

기본적인 라우터와 템플릿 엔진도 만들어봄
routes 폴더 안에는 page.js views 폴더 안에는 layout.pug,main.pug,profile.pug,error.pug를 생성함
약간의 디자인을 위해 main.css를 폴더 안에 생성함


page.js 에서는
//  /profile /join  /  까지 세개의 페이지로 구성 회원 가입과 로그인 시 에러 메시지를 보여주기 위해 /join 과 / 에는 flash 메시지가 연결되어 있음
//render 메서드안의 twits와 user 는 각각 빈 배열 null 이지만 나중에 넣을것임

그 다음은 클라이 언트 코드임 
클라이언트는 상당히 길고 pug는 띄어쓰기 간격주의 해야됨 
css pug 파일은 코드 복사하는게 좋음


    //layout.pug
     //-main.pug 가 block content 로 join.pug 도 content
     //main.pug
            //main.pug 에서는 user 변수가 존재할떄 게시글 업로드 폼을 보여줌 .
            //for문도 추가 됨
            //렌더링시 twits 배열안의 요소들을 읽어서 게시글로 만듬, 게시글 데이터를 나중에 twits 에 넣어주면됨
            //   -const follow = user && user.Followings.map(f => f.id).includes(twit.user.id);  follow는 pug의 변수이고 사용자가 현재 게시글 작성자를 팔로잉 중인지를 담고 있음
            //pug 변수임을 나타내기 위해 줄 제일 앞에 -를 붙여줌  이 변수는 다음줄 if 문에 사용됨
            //렌더링된 HTML에는 표시 되지 않음


9.2 데이터베이스 세팅하기

MySQL 시퀄라이즈로 데이터베이스 설정함

로그인 기능이 있으므로 사용자 테이블 필요하고 게시글을 저장할 게시글 테이블도 필요 
해시태그를 사용하므로 해시 태그 테이블도 만들어야 됨
models 에 테이블에 해당하는 파일들을 
user.js  post.js hashtag.js 만듬
게시글 모델 post 는  내용과 경로를 저장함 게시글 등록자의 아이디를 담은 컬럼은 나중에 관계를 설정할때 시퀄라이즈가 알아서 생성해줌
해시태그 모델을 따로 두는 것은  나중에 태그로  검색하기 위해서임

index.js 에 코드를 작성하고   .///참조하면됨

그리고 아직 데이터 베이스를 만들지 않았으므로 데이터베이스로부터 만들겠음
데이터베이스의 이름은 nodebird

하지만 시퀄라이즈는 config.json을 읽어 데이터베이스를 생성해주는 기능이 있음
따라서 config.json을 먼저 수정함 
 "development": {
    "username": "root",
    "password": "admin",
    "database": "nodebird",
    "host": "127.0.0.1",
    "dialect": "mysql"
  }
MySQL 비밀번호를 password 에 넣고 데이터베이스 이름을 nodebird로 바꿈
콘솔에서 sequelize db:create 명령어 입력하면 
데이터베이스 생성됨

그뒤 app.js 에 모델과 서버를 연결함

const { sequelize } = require('./models');
sequelize.sync();
추가하면 
서버쪽 세팅이 완료됨

시퀄라이즈는 테이블 생성 쿼리문에 IF NOT EXISTS 를 넣어주므로 테이블이 없을떄 테이블을 자동으로 생성함

데이터 베이스 세팅이 완료되었으므로 사용자 정보를 저장할수 있음
이제 로그인을 구현해 보도록 하겠음
//////////////////////////////////////////
//9.3 Passport 모듈로 로그인 구현하기 // 집

SNS 서비스 이므로 로그인이 필요하고회원가입과 로그인은 직접 구현할수도 있지만 세션과 쿠키처리 복잡한 작업이 많으므로 검증된 모듈을 사용하는 것이 좋음 
바로 Passport 를 사용하는 것 
우리의 서비스를 사용할 수 있게 해주는 여권 역할
기존 로그인 하고 SNS 로그인도 Passport 로 할수 있음

에러뜨면 //이거 마지막용
npm install --global --production windows-build-tools
안되면 따로 따로 설치 
npm install --save bcrypt@3.0.2
먼저 Passport 관련패키지 설치
npm i passport passport-local passport-kakao bcrypt

설치후 Passport모듈을 미리 app.js 연결함
연결하고 app.js 와 Passport 모듈 작성

9.3.1 로컬 로그인 구현하기
로컬로그인 이란 다른 SNS 서비스를 통해 로그인 하지 않고 자체적으로  회원가입후 로그인하는것
이를 구현하려면 passport-local 이 필요함
이미 설치 했으므로 로컬 로그인 전략만 세우면 됨
로그인에만 해당하는 전략이므로 회원가입을 따로 만들어야됨

회원가입 , 로그인 , 로그 아웃  라우터를 만들어야됨 
이러한 라우터는 접근 조건이 있음
로그인한 사용자는 회원가입과 로그인 라우터에 접근하면 안됨
이미 로그인을 했기 떄문임
마찬가지로 로그인하지 않은 사용자는 로그아웃 라우터에 접근하면 안됨
라우터에 접근 권한을 제어하는 미들웨어가 필요함
미들웨어를 만들며 Passport가 req 객체에 추가해주는 isAuthenticated 메서드를 알아봄
routes/middleswares.js
routes/page.js
만들고 회원가입 로그인 로그아웃 라우터 작성
routes/auth.js

나중에 app.js 와 연결할떄 /auth 접두사를 붙일것이므로 라우터의 주소는 각각 /auth/join,/auth/login,/auth/logout 이 됨

passport/localStrategy.js 로그인 전략 구현
kakoStrategy 로그인 구현

그 다음 카카오 로그인 라우터를 만듬
routes/auth.js

추가한 auth 라우터를 app.js에 연결함

하고 kakoStrategy clientID를 발급받아야함



9.4 Multer 모듈로 이미지 업로드 구현하기
SNS서비스인 만큼 이미지 업로드도 중요함
이미지는 보통 input[type=file] 태그와 form 태그를 통해서 업로드함
이떄 form 인코딩 타입은 multipart/form-data 인 경우가 많음
이런 형식으로 올라온 데이터는 직접 처리하기 힘드므로 multipart 처리용 모듈을 사용하는 것이 좋음
대표적 Multer

현재 NodeBird 도 게시글 작성 폼의 enctype multipart/form-data로 되어 있음
이를 통해 올라오는 데이터를 처리하려면 Multer가 필요함 
모듈설치
npm i multer

이미지를 어떻게 저장할것인지는 서비스의 특성에 따라 달라짐

NodeBird input 태그를 통해 이미지를 선택할때 먼저 업로드를 진행하고 업로드된 사진 주소를 다시 클라이언트에 알려줄것임
게시글 저장 시에는 이미지 데이터 대신 이미지 주소를 저장함 
그럼 post 라우터를 작성해보겠음

//실제 서버 운영시
현재 multer 모듈은 이미지를 서버 디스크에 저장함
디스크 저장은 간단하지만 서버에 문제가 생겼을떄 이미지가 제공되지 않거나 날라갈수 있음
따라서 AWS S3나 cloud 같은 정적파일 서비스를 사용하여 이미지를 따로 저장하고 제공하는 것이 좋음
이러한 서비스를 사용하고 싶다면 multer-s3나 multer-google-storage 같은 모듈을 찾아보면됨
이에 대해서는 뒤에서 알아봄
게시글 작성기능이 추가되었으므로 이제부터 메인 페이지 로딩시 메인페이지와 게시글을 함께 로딩하도록 하겠음
routes/page.js

9.5 프로젝트 마무리
이미지 업로드 했으니 이제 해시태그 검색 기능과 팔로잉 추가되었으므로
routes/post.js
routes/user.js
passport/index.js
include:[
      {model:User,attributes:['id','nick'],as:'Followers'},
      {model:User,attributes:['id','nick'],as:'Followings'}
      ]
      이부분을 User.Find 부분에 추가되었으므로

마지막으로routes/post.js   routes/user.js 부분을 app.js 연결함
업로드한 이미지를 제공할 라우터(/img) 도 express.static 미들웨어로 uploads 폴더와 연결함
express.static 을 여러번 쓸수 있는 사실을 알아야함
이제 uploads폴더내 사진들이 /img 주소로 제공됨

